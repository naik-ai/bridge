[project]
name = "peter-api"
version = "0.1.0"
description = "FastAPI backend for Peter dashboard platform"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    # Core Framework
    "fastapi>=0.109.0",
    "uvicorn[standard]>=0.27.0",
    "python-dotenv>=1.0.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",

    # Database (SQLModel = Pydantic + SQLAlchemy)
    "sqlmodel>=0.0.14",
    "sqlalchemy>=2.0.25",
    "alembic>=1.13.0",
    "psycopg2-binary>=2.9.9",
    "asyncpg>=0.29.0",

    # BigQuery
    "google-cloud-bigquery>=3.14.0",
    "google-cloud-bigquery-storage>=2.24.0",
    "db-dtypes>=1.2.0",

    # Cache
    "redis>=5.0.1",
    "hiredis>=2.3.0",

    # Authentication
    "google-auth>=2.26.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",

    # Storage
    "google-cloud-storage>=2.14.0",
    "PyYAML>=6.0.1",
    "GitPython>=3.1.40",

    # Secrets
    "google-cloud-secret-manager>=2.17.0",

    # Observability
    "opentelemetry-api>=1.22.0",
    "opentelemetry-sdk>=1.22.0",
    "opentelemetry-instrumentation-fastapi>=0.43b0",
    "opentelemetry-instrumentation-sqlalchemy>=0.43b0",
    "opentelemetry-instrumentation-redis>=0.43b0",
    "opentelemetry-exporter-gcp-trace>=1.6.0",
    "structlog>=24.1.0",

    # SQL Parsing
    "sqlglot>=20.11.0",

    # Utilities
    "python-dateutil>=2.8.2",
    "httpx>=0.26.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.3",
    "pytest-asyncio>=0.23.2",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.26.0",

    # Code Quality
    "black>=23.12.0",
    "ruff>=0.1.8",
    "mypy>=1.7.1",
    "types-PyYAML>=6.0.12",
    "types-python-dateutil>=2.8.19",

    # Performance Testing
    "locust>=2.20.0",

    # Pre-commit
    "pre-commit>=3.6.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.23.2",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.12.0",
    "ruff>=0.1.8",
    "mypy>=1.7.1",
    "types-PyYAML>=6.0.12",
    "types-python-dateutil>=2.8.19",
    "locust>=2.20.0",
    "pre-commit>=3.6.0",
]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | alembic
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
    "google.*",
    "sqlglot",
    "redis",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=src --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]
pythonpath = ["src"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/alembic/*",
    "*/__init__.py",
]

[tool.coverage.report]
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

"""initial schema

Revision ID: 7a0e1ff89060
Revises: 
Create Date: 2025-10-30 17:47:22.533552

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7a0e1ff89060'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('lineage_nodes',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('node_type', sa.Enum('dashboard', 'chart', 'query', 'table', name='nodetype'), nullable=False),
    sa.Column('node_id', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('node_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('node_type', 'node_id', name='uq_node_type_id')
    )
    op.create_index('idx_lineage_node_id', 'lineage_nodes', ['node_id'], unique=False)
    op.create_index('idx_lineage_node_type', 'lineage_nodes', ['node_type'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('dashboards',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('owner_id', sa.Uuid(), nullable=False),
    sa.Column('storage_path', sqlmodel.sql.sqltypes.AutoString(length=512), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('view_type', sa.Enum('analytical', 'operational', 'strategic', name='viewtype'), nullable=False),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('last_accessed', sa.DateTime(), nullable=True),
    sa.Column('access_count', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_dashboard_owner', 'dashboards', ['owner_id'], unique=False)
    op.create_index('idx_dashboard_updated', 'dashboards', ['updated_at'], unique=False)
    op.create_index(op.f('ix_dashboards_slug'), 'dashboards', ['slug'], unique=True)
    op.create_table('lineage_edges',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('source_node_id', sa.Uuid(), nullable=False),
    sa.Column('target_node_id', sa.Uuid(), nullable=False),
    sa.Column('edge_type', sa.Enum('contains', 'executes', 'reads_from', name='edgetype'), nullable=False),
    sa.Column('edge_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['source_node_id'], ['lineage_nodes.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['target_node_id'], ['lineage_nodes.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('source_node_id', 'target_node_id', 'edge_type', name='uq_lineage_edge')
    )
    op.create_index('idx_lineage_edge_source', 'lineage_edges', ['source_node_id'], unique=False)
    op.create_index('idx_lineage_edge_target', 'lineage_edges', ['target_node_id'], unique=False)
    op.create_index('idx_lineage_edge_type', 'lineage_edges', ['edge_type'], unique=False)
    op.create_table('sessions',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('token', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('last_accessed', sa.DateTime(), nullable=False),
    sa.Column('user_agent', sqlmodel.sql.sqltypes.AutoString(length=512), nullable=True),
    sa.Column('ip_address', sqlmodel.sql.sqltypes.AutoString(length=45), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sessions_expires_at'), 'sessions', ['expires_at'], unique=False)
    op.create_index(op.f('ix_sessions_token'), 'sessions', ['token'], unique=True)
    op.create_table('query_logs',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('dashboard_id', sa.Uuid(), nullable=True),
    sa.Column('user_id', sa.Uuid(), nullable=True),
    sa.Column('query_hash', sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
    sa.Column('sql_preview', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('bytes_scanned', sa.Float(), nullable=False),
    sa.Column('duration_ms', sa.Integer(), nullable=False),
    sa.Column('row_count', sa.Integer(), nullable=True),
    sa.Column('job_id', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('cache_hit', sa.Boolean(), nullable=False),
    sa.Column('endpoint', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('purpose', sa.Enum('verification', 'serving', 'precompute', name='querypurpose'), nullable=False),
    sa.Column('executed_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['dashboard_id'], ['dashboards.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_query_log_dashboard', 'query_logs', ['dashboard_id'], unique=False)
    op.create_index('idx_query_log_executed', 'query_logs', ['executed_at'], unique=False)
    op.create_index('idx_query_log_hash_executed', 'query_logs', ['query_hash', 'executed_at'], unique=False)
    op.create_index(op.f('ix_query_logs_executed_at'), 'query_logs', ['executed_at'], unique=False)
    op.create_index(op.f('ix_query_logs_query_hash'), 'query_logs', ['query_hash'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_query_logs_query_hash'), table_name='query_logs')
    op.drop_index(op.f('ix_query_logs_executed_at'), table_name='query_logs')
    op.drop_index('idx_query_log_hash_executed', table_name='query_logs')
    op.drop_index('idx_query_log_executed', table_name='query_logs')
    op.drop_index('idx_query_log_dashboard', table_name='query_logs')
    op.drop_table('query_logs')
    op.drop_index(op.f('ix_sessions_token'), table_name='sessions')
    op.drop_index(op.f('ix_sessions_expires_at'), table_name='sessions')
    op.drop_table('sessions')
    op.drop_index('idx_lineage_edge_type', table_name='lineage_edges')
    op.drop_index('idx_lineage_edge_target', table_name='lineage_edges')
    op.drop_index('idx_lineage_edge_source', table_name='lineage_edges')
    op.drop_table('lineage_edges')
    op.drop_index(op.f('ix_dashboards_slug'), table_name='dashboards')
    op.drop_index('idx_dashboard_updated', table_name='dashboards')
    op.drop_index('idx_dashboard_owner', table_name='dashboards')
    op.drop_table('dashboards')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index('idx_lineage_node_type', table_name='lineage_nodes')
    op.drop_index('idx_lineage_node_id', table_name='lineage_nodes')
    op.drop_table('lineage_nodes')
    # ### end Alembic commands ###
